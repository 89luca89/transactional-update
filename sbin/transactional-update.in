#!/bin/bash
#
# update_snapshot - update a snapshot of the current system
#
# Copyright (C) 2016 by Thorsten Kukuk <kukuk@suse.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

DIR_TO_MOUNT="dev sys proc opt usr/local var/log"
EXITCODE=0
ZYPPER_ARG=""
REWRITE_BOOTLOADER=0
LOGFILE="/var/log/transactional-update.log"

usage() {
    echo "Usage: transactional-update --help|--version"
    echo "       transactional-update [up|dup|patch|ptf|bootloader]"
    exit $1
}

print_version() {
    echo "transactional-update @VERSION@"
    exit 0;
}

log_info() {
    echo `date "+%Y-%m-%d %H:%M"` "$@" >> ${LOGFILE}
}

log_error() {
    echo `date "+%Y-%m-%d %H:%M "` "$@" >> ${LOGFILE}
    echo "$@" 1>&2
}

while [ 1 ]; do
    if [ $# -eq 0 ]; then
        break
    fi

    case "$1" in
        up|dup|patch)
	    ZYPPER_ARG=$1;
            shift;
            ;;
	ptf)
	    ZYPPER_ARG="in XXX"
	    shift;
	    ;;
        bootloader)
	    REWRITE_BOOTLOADER=1
            shift;
            ;;
        -h|--help)
            usage 0
            ;;
        --version)
            print_version
            ;;
        *)
            if [ $# -ge 1 ]; then
                usage 1;
            fi
            ;;
    esac
done

if [ $# -ne 0 ]; then
    usage 1;
fi

if [ ${REWRITE_BOOTLOADER} -eq 0 -a -z "${ZYPPER_ARG}" ]; then
  ZYPPER_ARG="up"
fi

log_info "transactional-update @VERSION@ started"

SNAPSHOT_ID=`snapper create -p -d "Snapshot Update"`
if [ $? -ne 0 ]; then
  log_error "ERROR: snapper create failed!"
  exit 1
fi

SNAPSHOT_DIR=/.snapshots/${SNAPSHOT_ID}/snapshot

# Make the snapshot read-write:
btrfs property set  ${SNAPSHOT_DIR} ro false
if [ $? -ne 0 ]; then
   log_error "ERROR: changing ${SNAPSHOT_DIR} to read-write failed!"
   exit 1;
fi

# Check if installed with SLES12
touch ${SNAPSHOT_DIR}/var/tmp/update_snapshot.test
if [ $? -ne 0 ]; then
   log_error "ERROR: System installation is too old!"
   exit 1;
fi
rm -f ${SNAPSHOT_DIR}/var/tmp/update_snapshot.test

# Mount everything we need:
for directory in $DIR_TO_MOUNT ; do
  mount -o bind /$directory ${SNAPSHOT_DIR}/$directory
  if [ $? -ne 0 ]; then
    log_error "ERROR: mount of $directory failed!"
    exit 1;
  fi
done

# Do we need to cleanup the /var/cache directory?
if [ -d ${SNAPSHOT_DIR}/var/cache/zypp ]; then
  VAR_CACHE_CLEANUP=0
else
  VAR_CACHE_CLEANUP=1
fi

# Create bind mount, else grub2 will fail
MOUNT_DIR=`mktemp -d`
mount -o rbind ${SNAPSHOT_DIR} ${MOUNT_DIR}

if [ -n "${ZYPPER_ARG}" ]; then
    log_info "Calling zypper ${ZYPPER_ARG}"
    env DISABLE_RESTART_ON_UPDATE=yes zypper -R ${MOUNT_DIR} ${ZYPPER_ARG}
    if [ $? -ne 0 ]; then
	log_error "ERROR: zypper ${ZYPPER_ARG} on $directory failed!"
	EXITCODE=1;
    fi
fi

if [ ${REWRITE_BOOTLOADER} -eq 1 ]; then
    log_info "Write new bootloader"
    # Create a new grub2 config
    chroot ${MOUNT_DIR} /usr/sbin/grub2-mkconfig > ${MOUNT_DIR}/boot/grub2/grub.cfg
    if [ $? -ne 0 ]; then
	log_error "ERROR: grub2-mkconfig failed!"
	EXITCODE=1;
    fi
    chroot ${MOUNT_DIR} /usr/sbin/grub2-install
    if [ $? -ne 0 ]; then
	log_error "ERROR: grub2-install failed!"
	EXITCODE=1;
    fi
fi

# Unmount everything we don't need anymore:
for directory in $DIR_TO_MOUNT ; do
  umount ${SNAPSHOT_DIR}/$directory
  if [ $? -ne 0 ]; then
    log_error "ERROR: umount of $directory failed!"
    EXITCODE=1;
  fi
done
umount ${MOUNT_DIR}

# Cleanup of temporary mount point
rmdir ${MOUNT_DIR}

# cleanup other stuff
# cleanup cache directory
if [ $VAR_CACHE_CLEANUP -eq 1 ]; then
  rm -rf ${SNAPSHOT_DIR}/var/cache/*
fi
# systemd-tmpfiles creates directories/files even if /run is no tmpfs:
rm -rf ${SNAPSHOT_DIR}/run/*
# WARNING: /var/spool/ can contain changes through RPM!
rm -rf ${SNAPSHOT_DIR}/var/spool/*

# Somersault:
if [ $EXITCODE -eq 0 ]; then
    BTRFS_ID=`btrfs subvolume list / |grep ${SNAPSHOT_DIR} | awk '{print $2}'`
    if [ -z $BTRFS_ID ]; then
	log_error "ERROR: couldn't determine btrfs subvolume ID"
	EXITCODE=1
    else
	btrfs subvolume set-default $BTRFS_ID ${SNAPSHOT_DIR}
	if [ $? -ne 0 ]; then
	    log_error "ERROR: umount of $directory failed!"
	    EXITCODE=1;
	fi
    fi
fi


# Make the snapshot read-only again:
btrfs property set  ${SNAPSHOT_DIR} ro true
if [ $? -ne 0 ]; then
   log_error "ERROR: changing ${SNAPSHOT_DIR} to read-only failed!"
   EXITCODE=1
fi

if [ $EXITCODE -ne 0 ]; then
    log_error "Removing snapshot..."
    snapper delete ${SNAPSHOT_ID}
fi

log_info "transactional-update finished"

exit $EXITCODE
