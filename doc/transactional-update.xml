<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
	"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<book id="tug">
  <bookinfo>
    <title>The Transactional Update Guide</title>
    <authorgroup>
      <author>
        <firstname>Thorsten</firstname>
        <surname>Kukuk</surname>
        <email>kukuk@thkukuk.de</email>
      </author>
      <author>
        <firstname>Ignaz</firstname>
        <surname>Forster</surname>
        <email>iforster@suse.com</email>
      </author>
    </authorgroup>
    <releaseinfo>Version 0.3, 12. September 2019</releaseinfo>
    <abstract>
      <para>
	This is the documentation for transactional-update and is intended for
	users, administrators and packagers.
      </para>
      <para> It describes how transactional-update with Btrfs works by giving
	an overview of the design, what an administrator needs to know about
	setting up and operating such a system and what a packager needs to
	know for creating compatible packages.
      </para>
      <para>
	For specific usage see the
	<ulink url="https://kubic.opensuse.org/documentation/man-pages/transactional-update.8.html">transactional-update man page</ulink>
	or the
	<ulink url="https://kubic.opensuse.org/documentation/man-pages/">list of Kubic related commands</ulink>.
      </para>
    </abstract>
  </bookinfo>

  <chapter id="tu-introduction">
    <title>Introduction</title>
    <section id="tu-introduction-description">
      <title>Description</title>
      <para>
        <emphasis remap='B'>transactional-update</emphasis>
	is an application that allows to update a Linux system and its
	applications in an <emphasis>atomic</emphasis> way: The update will
	be performed in the background, not influencing the currently
	running system. The update will be activated by	a reboot instead,
	similar to
	<ulink url="https://rpm-ostree.readthedocs.io/en/latest/">rpm-ostree</ulink>
	or CoreOS' previous Container OS. However
	<emphasis remap='B'>transactional-update</emphasis> is not another
	package manager, but is reusing the existing system tools such as
	<emphasis>RPM</emphasis> as the packaging format and
	<emphasis>zypper</emphasis> as the package manager. It depends on
	<emphasis>Btrfs</emphasis> due to its snapshotting and
	copy-on-write features.
      </para>
      <para>
	The idea and reason to build up on existing tools is the ability
	to continue using existing packages and tool chains for delivery and
	application of updates. While currently only implemented for (open)SUSE
	environments the concept is vendor independent and may also be
	implemented for other package managers and package formats.
      </para>
      <para>
	Conceptually <emphasis remap='B'>transactional-update</emphasis>
	creates a new snapshot with <emphasis>btrfs</emphasis> before
	performing any update and uses that snapshot for modifications.
	Since btrfs snapshots contain only the difference between two versions
	and thus are usually very small updates done with
	<emphasis remap='B'>transactional-update</emphasis> are very space
	efficient.
	This also means several snapshots can be installed at the same time
	without a problem.
      </para>
    </section>

    <section id="tu-introduction-definition">
      <title>Definition</title>
      <para>
	A <emphasis>transactional update</emphasis> (also known as
	<emphasis>atomic upgrade</emphasis>) is an update that
      </para>
      <itemizedlist>
	<listitem>
	  <para>
	    is atomic:
	  </para>
	  <itemizedlist>
	    <listitem>
	      <para>
		The update does not influence the running system.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		The machine can be powered off at any time. When powered on
		again either the unmodified old state or the new state is
		active, but no state in between.
	      </para>
	    </listitem>
	  </itemizedlist>
	</listitem>
	<listitem>
	  <para>
	    can be rolled back:
	  </para>
	  <itemizedlist>
	    <listitem>
	      <para>
		If the upgrade fails or if a newer software version turns out
		to not be compatible with your infrastructure, the system can
		quickly be restored to a previous state.
	      </para>
	    </listitem>
	  </itemizedlist>
	</listitem>
      </itemizedlist>
    </section>

    <section id="tu-introduction-reason">
      <title>Motivation</title>
      <para>
	Linux distributions have had working update mechanisms for many, many
	years - so why do we need something new? Distributions evolved,
	introducing new concepts such as rolling releases, containers or long
	time support releases. While the classical update mechanisms are
	probably perfectly fine for a regular desktop user, using a
	distribution with regular releases, other concepts may require
	different concepts.
      </para>
      <para>
	Distributions with <emphasis role="bold">rolling updates</emphasis> face
	the problem: how should intrusive updates be applied to a running system
	- without breaking the update mechanism itself? Examples like the
	migration from SysV init to systemd, a major version update of a desktop
	environment while the desktop is still running or even only a small
	update to D-Bus may give a good idea of the problem. The desktop
	environment may simply terminate, killing the update process and leaving
	the system in a broken, undefined state. If any update breaks such a
	system there needs to be a quick way to roll back the system to the last
	working state.
      </para>
      <para>
	On <emphasis role="bold">mission critical systems</emphasis> you want to
	make sure that no service or user behaviour interferes with the update
	of the system. And conversely the update should not modify the system,
	e.g. by uncontrolled restarts of services or unexpected modifications to
	the system in post scripts. Potential interruptions are deferred to a
	defined maintenance window instead. For really critical systems the
	update can be verified (e.g. using <command>snapper diff</command>) or
	discarded before actually booting into the new system. If an update
	encounters an error the new snapshot will be discarded automatically.
      </para>
      <para>
	For <emphasis role="bold">cluster nodes</emphasis> it is important that
	the system is always in a consistent state, requires no manual
	interaction and is able to recover itself from error conditions.
	For these systems transactional-updates provides automatic
	updates; snapshots with failed updates will be automatically removed.
	Automatic reboots can be triggered using a variety of different reboot
	methods (e.g. rebootmgr, kured or systemd), making the appliance of
	the updates cluster aware.
      </para>
      <para>
	Sometimes new kernel versions or software updates are
	incompatible with your hardware or other software. In this case there
	should be a quick and easy way to roll back to the state before the
	update was applied.
      </para>
      <para>
	There are other solutions available for the above problems, like
	downloading all RPMs upfront and apply them during the boot phase.
	This however will block the system for an unknown period of time
	while the update is running, delaying the availablility of the system.
      </para>
    </section>
  </chapter>

  <chapter id="tu-howitworks">
    <title>Concept</title>
    <section id="tu-concept">
      <title>Filesystem</title>
      <para>
	This chapter describes the handling of the root file system, i.e. the
	core functionality of
	<emphasis remap='B'>transactional-update</emphasis>. Of course not
	all information (such as
	<filename class='directory'>/var</filename> or
	<filename class='directory'>/home</filename>) should be stored on the
	root volume, see <xref linkend="tu-setup" /> for a real world setup.
      </para>
      <para>
	<emphasis remap='B'>transactional-update</emphasis> is based around
	several concepts of the <emphasis>Btrfs</emphasis> file system, a
	general purpose Copy-on-Write (Cow) filesystem with snapshot and
	subvolume support.
	Subvolumes look like a directory, but behave like a mount point. They
	can be accessed from the parent subvolume like a directory, or they can
	be mounted on other directories of the same filesytem.
	Snapshots will be created from existing subvolumes, excluding other
	subvolumes inside of it, and are read-only by default.
      </para>
      <para>
	Implementation note: <emphasis remap='B'>transactional-update</emphasis>
	may also be implemented for any other file system as long as it provides
	snapshot functionality and the ability to boot from snapshots. See
	<xref linkend="tu-porting" /> for requirements and porting information.
      </para>
    </section>
    <section id="tu-howitworks-chroot">
      <title>Updating the correct snapshot</title>
      <para>
	transactional-update is using <emphasis>zypper</emphasis> with the
	<option>--root</option>	option pointing to the new snapshot for package
	management. Other commands (such as the creation of initrd) will be
	called with <command>chroot</command>.
      </para>
    </section>
    <section id="tu-howitworks-example">
      <title>Workflow</title>
      <mediaobject>
        <imageobject>
          <imagedata fileref="png/Workflow-Start.png"/>
        </imageobject>
        <textobject>
          <phrase>List of snapshots</phrase>
        </textobject>
	<caption>
	  <para>
	    At the beginning, there is a list of old snapshots, each one based
	    on the other one, and the newest one is the current root filesystem.
	  </para>
	</caption>
      </mediaobject>
      <mediaobject>
        <imageobject>
          <imagedata fileref="png/Workflow-Step1.png"/>
        </imageobject>
        <textobject>
          <phrase>List of snapshots with new read-only Clone of current root filesystem</phrase>
        </textobject>
	<caption>
	  <para>
	    In the first step, a new read-only snapshot of the current root
	    filesystem will be created.
	  </para>
	</caption>
      </mediaobject>
      <mediaobject>
        <imageobject>
          <imagedata fileref="png/Workflow-Step2.png"/>
        </imageobject>
        <textobject>
          <phrase>List of snapshots with a read-write Clone of current root filesystem</phrase>
        </textobject>
	<caption>
	  <para>
	    In the second step we switch the snapshot from read-only to
	    read-write, so that we can update it.
	  </para>
	</caption>
      </mediaobject>
      <mediaobject>
        <imageobject>
          <imagedata fileref="png/Workflow-Step3.png"/>
        </imageobject>
        <textobject>
          <phrase>List of snapshots with a read-write Clone of current root
	  filesystem, which will be updated with zypper.</phrase>
        </textobject>
	<caption>
	  <para>
	    In the third step the snapshot will be updated. This can be
	    <emphasis>zypper up</emphasis> or <emphasis>zypper dup</emphasis>,
	    the installation or removal of a package or any other modification
	    to the root file system.
	  </para>
	</caption>
      </mediaobject>
      <mediaobject>
        <imageobject>
          <imagedata fileref="png/Workflow-Step4.png"/>
        </imageobject>
        <textobject>
          <phrase>List of snapshots with the clone again read-only.</phrase>
        </textobject>
	<caption>
	  <para>
	    In the fourth step the snapshot will be changed back to read-only,
	    so that the data cannot be modified anymore.
	  </para>
	</caption>
      </mediaobject>
      <mediaobject>
        <imageobject>
          <imagedata fileref="png/Workflow-Step5.png"/>
        </imageobject>
        <textobject>
          <phrase>List of snapshots with the read-only Clone the new default.</phrase>
        </textobject>
	<caption>
	  <para>
	    The last step is to mark the updated snapshot as new root
	    filesystem. This is the atomic step: If the power would have
	    been pulled before, the unchanged old system would have been
	    booted. Now the new, updated system will boot.
	  </para>
	</caption>
      </mediaobject>
      <mediaobject>
        <imageobject>
          <imagedata fileref="png/Workflow-After-Reboot.png"/>
        </imageobject>
        <textobject>
          <phrase>List of snapshots with the current root filesystem as newest
	  at the end.</phrase>
        </textobject>
	<caption>
	  <para>
	    After reboot, the newly prepared snapshot is the new root
	    filesystem. In case anything goes wrong a rollback to any of
	    the older snapshots can be performed.
	  </para>
	</caption>
      </mediaobject>
      <mediaobject>
        <imageobject>
          <imagedata fileref="png/Workflow-Without-Reboot.png"/>
        </imageobject>
        <textobject>
          <phrase>List of snapshots with a read-write Clone of current root
	  filesystem, which will be updated with zypper.</phrase>
        </textobject>
	<caption>
	  <para>
	    If the system is not rebooted and
	    <emphasis>transactional-update</emphasis> is called again a new
	    snapshot will be created and updated. This new snapshot is based
	    on the <emphasis>current</emphasis> running root filesystem again,
	    <emphasis>not</emphasis> on the new default snapshot!
	    For stacking changes (i.e. if several commands are supposed to be
	    combined in one single snapshot) the <option>shell</option> command
	    can be used to perform any number of operations.
	  </para>
	</caption>
      </mediaobject>
    </section>
    <section id="tu-howitworks-simplified">
      <title>Simplified workflow</title>
      <para>
	In essence the logic of transactional-update can be summarized as
	follows:
      </para>
      <itemizedlist>
	<listitem>
	  <programlisting>
SNAPSHOT_ID=`snapper create -p -d "Snapshot Update"`
	  </programlisting>
	</listitem>
	<listitem>
	  <programlisting>
btrfs property set ${SNAPSHOT_DIR} ro false
	  </programlisting>
	</listitem>
	<listitem>
	  <programlisting>
zypper -R ${SNAPSHOT_DIR} up|patch|dup|...
	  </programlisting>
	</listitem>
	<listitem>
	  <programlisting>
btrfs property set ${SNAPSHOT_DIR} ro true
	  </programlisting>
	</listitem>
	<listitem>
	  <programlisting>
btrfs subvol set-default ${SNAPSHOT_DIR}
	  </programlisting>
	</listitem>
	<listitem>
	  <programlisting>
systemctl reboot
	  </programlisting>
	</listitem>
      </itemizedlist>
    </section>
  </chapter>

  <chapter id="tu-setup">
    <title>System setup</title>
    <section id="tu-setup-readonly">
      <title>Read-only file system</title>
      <para>
	<emphasis remap='B'>transactional-update</emphasis> is typically used
	on a read-only root file system, even though it also supports
	regular read-write systems.
      </para>
    </section>
    <section id="tu-setup-var">
      <title>/var</title>
      <para>
	On a system with snapshot support
	<filename class='directory'>/var</filename> should not be part of the
	root file system, otherwise doing a rollback to a previous state would
	also roll back the <filename class='directory'>/var</filename>
	contents. On a read-only system this directory also has be mounted in
	read-write mode anyway, as several variable data is written into it.
      </para>
      <para>
	Due to the volatile nature of
	<filename class='directory'>/var</filename> the directory will
	<emphasis>not</emphasis> be mounted into the new snapshot during the
	<emphasis remap='B'>transactional-update</emphasis> run, as this would
	break atomicity: The currently running system depends on the old state
	of the data (imagine a database migration was triggered by a package).
	Any modifications to <filename class='directory'>/var</filename>
	therefore have to be in the new system, i.e. modifying the contents of
	<filename class='directory'>/var</filename> as part of the packaging
	scripts is not allowed.
      </para>
      <para>
	The only exception to this rule are directories: Those will be
	recreated during the first boot into the updated system by the
	<emphasis>create-dirs-from-rpmdb.service</emphasis> helper service. For
	all other cases please use one of the options described in
	<ulink url="https://en.opensuse.org/openSUSE:Packaging_for_transactional-updates">Packaging for transactional-updates</ulink>
	and
	<ulink url="https://en.opensuse.org/openSUSE:Packaging_guidelines#Migration_.2F_Upgrades">Migration / Upgrade</ulink>
	in the Packaging guidelines for more information. If a package is
	breaking this rule a warning message indicating the affected file is
	printed at the end of the
	<emphasis remap='B'>transactional-update</emphasis> run.
      </para>
    </section>
    <section id="tu-setup-etc">
      <title>/etc</title>
      <para>
	<emphasis remap='B'>transactional-update</emphasis> also supports
	write support to <filename class='directory'>/etc</filename> on an
	otherwise read-only file system. To do so an
	<emphasis>overlayfs</emphasis> layer is put on top of the system's
	<filename class='directory'>/etc</filename> directory. All modified
	configuration files will end up in the current snapshot's overlay in
	<filename class='directory'>/var/lib/overlay/&lt;snapshotnum&gt;/etc</filename>.
      </para>
      <para>
	Each snapshot will have one associated overlay directory. The overlay
	directories are mounted using overlay stacking, i.e. the current
	snapshot will mount its associated overlay as the
	<option>upperdir</option> and the previous snapshot's overlays as
	<option>lowerdir</option>. That means that the current snapshot will
	see all the changes accumulated in the previous snapshots, but older
	snapshots will not see changes applied to newer snapshots.
      </para>
      <para>
	Let's have a look at an example <filename>fstab</filename> entry:
	<programlisting>overlay  /etc  overlay  defaults,upperdir=/sysroot/var/lib/overlay/83/etc,lowerdir=/sysroot/var/lib/overlay/81/etc:/sysroot/var/lib/overlay/80/etc:/sysroot/var/lib/overlay/77/etc:/sysroot/var/lib/overlay/76/etc:/sysroot/etc,workdir=/sysroot/var/lib/overlay/work-etc,x-systemd.requires-mounts-for=/var,x-systemd.requires-mounts-for=/var/lib/overlay,x-systemd.requires-mounts-for=/sysroot/var,x-systemd.requires-mounts-for=/sysroot/var/lib/overlay,x-initrd.mount  0  0</programlisting>
      </para>
      <itemizedlist>
      <listitem><para>
	We are currently in snapshot <emphasis>83</emphasis> as indicated by the
	<option>upperdir</option> directory. This can be confirmed by typing
	<command>snapper list</command> or
	<command>btrfs subvolume get-default /</command>. All changes to
	<filename class='directory'>/etc</filename> will end up in this
	directory.
      </para></listitem>
      <listitem><para>
	<option>lowerdir</option> contains several overlays from previous
	snapshots. In this case it seem the snapshots were not created
	consecutively - maybe there were a few rollbacks in between or a
	snapshot wasn't applied by rebooting into it. The lowest snapshot is
	always <filename class='directory'>/sysroot/etc</filename>, containing
	the root file system's contents.
      </para></listitem>
      <listitem><para>
	As <filename class='directory'>/etc</filename> is mounted by
	<application>dracut</application> during early boot the options have to
	be prefixed with <emphasis>/sysroot</emphasis>. The
	<command>x-systemd.</command> options are setting up the volume's
	<application>systemd</application> dependencies correctly.
      </para></listitem>
      </itemizedlist>
      <para>
	To prevent the <filename class='directory'>/etc</filename> overlays
	from growing infinitely they will be synced into the root file system if
	no snapshot is referencing them any more. So please be aware that the
	root file system's <filename class='directory'>/etc</filename> state by
	itself does neither contain the original package contents nor the
	snapshot's current state. Only the snapshot plus all overlay layers
	represents the state of <filename class='directory'>/etc</filename>
	correctly. Overlays no longer needed because they have been merged into
	all snapshots will be deleted during the <command>transactional-update
	cleanup</command> run.
      </para>
    </section>
<!--
    <para>
      Read-only root filesystem or Read-Write filesystem? Requirements for
      RPMs, what is allowed and what not. Config files in /etc with
      overlayfs. Special handling for passwd, shadow, group. Rollback. Strict
      seperation from data and applications.
    </para>
-->
  </chapter>

  <chapter id='tu-files'>
    <title>Files</title>
    <variablelist>
      <varlistentry>
        <term><filename>/usr/etc/transactional-update.conf</filename></term>
        <listitem>
          <para>
	    This is the reference configuration file for
	    <command>transactional-update</command>, containing distribution
	    default values. This file should not be changed by the
	    administrator.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><filename>/etc/transactional-update.conf</filename></term>
        <listitem>
          <para>
	    To change the default configuration for
	    <command>transactional-update</command> copy or create this file
	    and change the options accordingly. See
	    <ulink url="https://kubic.opensuse.org/documentation/man-pages/transactional-update.conf.5.html">transactional-update.conf(5)</ulink>
	    for a description of the configuration options. Values from this
	    file will overwride the distribution default values.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><filename>/var/lib/overlay/</filename></term>
        <listitem>
          <para>
	    See <xref linkend="tu-setup-etc" /> for an explanation of this
	    directory's contents.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </chapter>

  <chapter id='tu-porting'>
    <title>Porting to other systems</title>
    <para>
      You need a CoW filesystem (or anything else with snapshots
      and rollback), else this should work with every package manager.
    </para>
  </chapter>

  <chapter id='tu-author'>
    <title>Author/acknowledgments</title>
    <para>
      This document was written by Thorsten Kukuk &lt;kukuk@suse.com&gt;
      with many contributions from Ignaz Forster &lt;iforster@suse.com&gt;.
    </para>
  </chapter>

  <chapter id='tu-copyright'>
    <title>Copyright information for this document</title>
    <para>
    </para>
  </chapter>
</book>
